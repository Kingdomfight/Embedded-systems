/* 
 * File:   main.c
 * Author: Roy Meijer
 *
 * Created on 16 February 2022, 15:03
 */

/* Generic C libraries */
#include <stdio.h>
#include <stdlib.h>

/* XC32 libraries */
#include <xc.h>
#include <sys/attribs.h>

/* Your own custom made libraries */
#include "main.h"

#include "led.h"
#include "lcd.h"

#include "voltageReading.h"
#include "temperatureReading.h"

#define LCD_ROWS 2
#define LCD_COLS 16
#define ALARM_TEMPERATURE 25.0

//initialisation of timer 1 for an interrupt rate of 2 Hz
void T1_Init();
//checks if timer 1 has interrupted
uint8_t T1_Interrupted();

//places interger in string buffer. caps at 4 digits
void itoa4digits (int inputInt, char* outputString);
//places floating point variable in string buffer. caps at 4 digits
void ftoa4digits (float inputFloat, char* outputString);

int main() {
    //string which is printed to LCD
    char lcdString[LCD_ROWS][LCD_COLS];
    
    //measures values
    int16_t batteryMilliVolts = 0;
    int16_t circuitMilliAmperes = 0;
    float temperatureDegreesCelcius = 0.0;
    
    //measures values in string
    char batteryMilliVoltsString[5];
    char circuitMilliAmperesString[5];
    char temperatureDegreesCelciusString[5];
    
    //initalisation functions
    LED_Init();
    LCD_Init();
    
    T1_Init();
    
    voltageReading_Init();
    temperatureReading_Init();
    
    while(1) {
        //check if timer 1 has interrupted
        if (T1_Interrupted()) {
            //read milli volts, cap between 4 digits
            batteryMilliVolts = voltageReading_getBatteryMilliVolts();
            itoa4digits(batteryMilliVolts, batteryMilliVoltsString);
            
            //read milli amps, cap between 4 digits
            circuitMilliAmperes = voltageReading_getCircuitMilliAmperes();
            itoa4digits(circuitMilliAmperes, circuitMilliAmperesString);
            
            //makes sure there is 1 digit after the decimal sign
            temperatureDegreesCelcius = temperatureReading_getDegreesCelcius();
            ftoa4digits(temperatureDegreesCelcius, temperatureDegreesCelciusString);
            
            //store voltage and current on line 0 of lcd stringcircuitMilliAmperesString);
            sprintf(lcdString[0], "%s mV  %s mA", batteryMilliVoltsString, circuitMilliAmperesString);
            sprintf(lcdString[1], "%s deg C", temperatureDegreesCelciusString);
            
            //write voltage, current and temperature on LCD screen
            LCD_WriteStringAtPos(lcdString[0], 0, 0);
            LCD_WriteStringAtPos(lcdString[1], 1, 0);
            
            //blink LD1 when the temperature becomes above 25 degrees Celcius
            if (temperatureReading_checkAlarm(ALARM_TEMPERATURE)) {
                LED_ToggleValue(0);
            } else { //turn off LD1 when the temperature becomes below 25 degrees Celcius
                LED_SetValue(0, 0);
            }
        }
    }
    return (0);
}

void T1_Init() {
    TMR1 = 0; //initial value of timer register = 0
    T1CON = 0x8030; //set prescaler to 1:256 (approx 30186 Hz)
    PR1 = 15092; //set period register to 15092 (approx 2 Hz)
}

uint8_t T1_Interrupted() {
    if (IFS0bits.T1IF) { //check if the timer has generated an interrupt by overflowing PR1
        IFS0bits.T1IF = 0; //clear interrupt bit
        return 1; //return true
    }
    return 0; //return false
}

void itoa4digits (int inputInt, char* outputString) {
    if (inputInt >= 0) {
        if (inputInt < 10) {
            sprintf(outputString, "   %d", inputInt);
        } else if (inputInt < 100) {
            sprintf(outputString, "  %d", inputInt);
        } else if (inputInt < 1000) {
            sprintf(outputString, " %d", inputInt);
        } else if (inputInt < 9999) {
            sprintf(outputString, "%d", inputInt);
        } else {
            sprintf(outputString, "%s", "9999");
        }
    } else {
        if (-inputInt < 10) {
            sprintf(outputString, "  -%d", -inputInt);
        } else if (-inputInt < 100) {
            sprintf(outputString, " -%d", -inputInt);
        } else if (-inputInt < 1000) {
            sprintf(outputString, "-%d", -inputInt);
        } else {
            sprintf(outputString, "%s", "-999");
        }
    }
}

void ftoa4digits (float inputFloat, char* outputString) {
    int tempFloat = (int)(inputFloat * 10);
    
    if (tempFloat >= 0) {
        if (tempFloat < 10) {
            sprintf(outputString, " 0.%d", tempFloat);
        } else if (tempFloat < 100) {
            sprintf(outputString, " %d.%d", tempFloat/10, tempFloat%10);
        } else if (tempFloat < 1000) {
            sprintf(outputString, "%d.%d", tempFloat/10, tempFloat%10);
        } else {
            sprintf(outputString, "%s", "99.9");
        }
    } else {
        if (-tempFloat < 10) {
            sprintf(outputString, "-0.%d", -tempFloat);
        } else if (-tempFloat < 100) {
            sprintf(outputString, "-%d.%d", (-tempFloat)/10, (-tempFloat)%10);
        } else {
            sprintf(outputString, "%s", "-9.9");
        }
    }
}